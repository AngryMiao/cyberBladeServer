// Code generated by ent, DO NOT EDIT.

package ent

import (
	"angrymiao-ai/app/ent/chatconfig"
	"angrymiao-ai/app/ent/predicate"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeChatConfig = "ChatConfig"
)

// ChatConfigMutation represents an operation that mutates the ChatConfig nodes in the graph.
type ChatConfigMutation struct {
	config
	op              Op
	typ             string
	id              *int
	create_time     *time.Time
	update_time     *time.Time
	device_code     *string
	discord_user_id *string
	forward_mode    *chatconfig.ForwardMode
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*ChatConfig, error)
	predicates      []predicate.ChatConfig
}

var _ ent.Mutation = (*ChatConfigMutation)(nil)

// chatconfigOption allows management of the mutation configuration using functional options.
type chatconfigOption func(*ChatConfigMutation)

// newChatConfigMutation creates new mutation for the ChatConfig entity.
func newChatConfigMutation(c config, op Op, opts ...chatconfigOption) *ChatConfigMutation {
	m := &ChatConfigMutation{
		config:        c,
		op:            op,
		typ:           TypeChatConfig,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChatConfigID sets the ID field of the mutation.
func withChatConfigID(id int) chatconfigOption {
	return func(m *ChatConfigMutation) {
		var (
			err   error
			once  sync.Once
			value *ChatConfig
		)
		m.oldValue = func(ctx context.Context) (*ChatConfig, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ChatConfig.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChatConfig sets the old ChatConfig of the mutation.
func withChatConfig(node *ChatConfig) chatconfigOption {
	return func(m *ChatConfigMutation) {
		m.oldValue = func(context.Context) (*ChatConfig, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChatConfigMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChatConfigMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChatConfigMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ChatConfigMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ChatConfig.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *ChatConfigMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ChatConfigMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the ChatConfig entity.
// If the ChatConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatConfigMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ChatConfigMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ChatConfigMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ChatConfigMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the ChatConfig entity.
// If the ChatConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatConfigMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ChatConfigMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetDeviceCode sets the "device_code" field.
func (m *ChatConfigMutation) SetDeviceCode(s string) {
	m.device_code = &s
}

// DeviceCode returns the value of the "device_code" field in the mutation.
func (m *ChatConfigMutation) DeviceCode() (r string, exists bool) {
	v := m.device_code
	if v == nil {
		return
	}
	return *v, true
}

// OldDeviceCode returns the old "device_code" field's value of the ChatConfig entity.
// If the ChatConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatConfigMutation) OldDeviceCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeviceCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeviceCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeviceCode: %w", err)
	}
	return oldValue.DeviceCode, nil
}

// ResetDeviceCode resets all changes to the "device_code" field.
func (m *ChatConfigMutation) ResetDeviceCode() {
	m.device_code = nil
}

// SetDiscordUserID sets the "discord_user_id" field.
func (m *ChatConfigMutation) SetDiscordUserID(s string) {
	m.discord_user_id = &s
}

// DiscordUserID returns the value of the "discord_user_id" field in the mutation.
func (m *ChatConfigMutation) DiscordUserID() (r string, exists bool) {
	v := m.discord_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDiscordUserID returns the old "discord_user_id" field's value of the ChatConfig entity.
// If the ChatConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatConfigMutation) OldDiscordUserID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDiscordUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDiscordUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDiscordUserID: %w", err)
	}
	return oldValue.DiscordUserID, nil
}

// ClearDiscordUserID clears the value of the "discord_user_id" field.
func (m *ChatConfigMutation) ClearDiscordUserID() {
	m.discord_user_id = nil
	m.clearedFields[chatconfig.FieldDiscordUserID] = struct{}{}
}

// DiscordUserIDCleared returns if the "discord_user_id" field was cleared in this mutation.
func (m *ChatConfigMutation) DiscordUserIDCleared() bool {
	_, ok := m.clearedFields[chatconfig.FieldDiscordUserID]
	return ok
}

// ResetDiscordUserID resets all changes to the "discord_user_id" field.
func (m *ChatConfigMutation) ResetDiscordUserID() {
	m.discord_user_id = nil
	delete(m.clearedFields, chatconfig.FieldDiscordUserID)
}

// SetForwardMode sets the "forward_mode" field.
func (m *ChatConfigMutation) SetForwardMode(cm chatconfig.ForwardMode) {
	m.forward_mode = &cm
}

// ForwardMode returns the value of the "forward_mode" field in the mutation.
func (m *ChatConfigMutation) ForwardMode() (r chatconfig.ForwardMode, exists bool) {
	v := m.forward_mode
	if v == nil {
		return
	}
	return *v, true
}

// OldForwardMode returns the old "forward_mode" field's value of the ChatConfig entity.
// If the ChatConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatConfigMutation) OldForwardMode(ctx context.Context) (v chatconfig.ForwardMode, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldForwardMode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldForwardMode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldForwardMode: %w", err)
	}
	return oldValue.ForwardMode, nil
}

// ClearForwardMode clears the value of the "forward_mode" field.
func (m *ChatConfigMutation) ClearForwardMode() {
	m.forward_mode = nil
	m.clearedFields[chatconfig.FieldForwardMode] = struct{}{}
}

// ForwardModeCleared returns if the "forward_mode" field was cleared in this mutation.
func (m *ChatConfigMutation) ForwardModeCleared() bool {
	_, ok := m.clearedFields[chatconfig.FieldForwardMode]
	return ok
}

// ResetForwardMode resets all changes to the "forward_mode" field.
func (m *ChatConfigMutation) ResetForwardMode() {
	m.forward_mode = nil
	delete(m.clearedFields, chatconfig.FieldForwardMode)
}

// Where appends a list predicates to the ChatConfigMutation builder.
func (m *ChatConfigMutation) Where(ps ...predicate.ChatConfig) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ChatConfigMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ChatConfig).
func (m *ChatConfigMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChatConfigMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.create_time != nil {
		fields = append(fields, chatconfig.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, chatconfig.FieldUpdateTime)
	}
	if m.device_code != nil {
		fields = append(fields, chatconfig.FieldDeviceCode)
	}
	if m.discord_user_id != nil {
		fields = append(fields, chatconfig.FieldDiscordUserID)
	}
	if m.forward_mode != nil {
		fields = append(fields, chatconfig.FieldForwardMode)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChatConfigMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case chatconfig.FieldCreateTime:
		return m.CreateTime()
	case chatconfig.FieldUpdateTime:
		return m.UpdateTime()
	case chatconfig.FieldDeviceCode:
		return m.DeviceCode()
	case chatconfig.FieldDiscordUserID:
		return m.DiscordUserID()
	case chatconfig.FieldForwardMode:
		return m.ForwardMode()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChatConfigMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case chatconfig.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case chatconfig.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case chatconfig.FieldDeviceCode:
		return m.OldDeviceCode(ctx)
	case chatconfig.FieldDiscordUserID:
		return m.OldDiscordUserID(ctx)
	case chatconfig.FieldForwardMode:
		return m.OldForwardMode(ctx)
	}
	return nil, fmt.Errorf("unknown ChatConfig field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChatConfigMutation) SetField(name string, value ent.Value) error {
	switch name {
	case chatconfig.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case chatconfig.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case chatconfig.FieldDeviceCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeviceCode(v)
		return nil
	case chatconfig.FieldDiscordUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDiscordUserID(v)
		return nil
	case chatconfig.FieldForwardMode:
		v, ok := value.(chatconfig.ForwardMode)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetForwardMode(v)
		return nil
	}
	return fmt.Errorf("unknown ChatConfig field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChatConfigMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChatConfigMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChatConfigMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ChatConfig numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChatConfigMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(chatconfig.FieldDiscordUserID) {
		fields = append(fields, chatconfig.FieldDiscordUserID)
	}
	if m.FieldCleared(chatconfig.FieldForwardMode) {
		fields = append(fields, chatconfig.FieldForwardMode)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChatConfigMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChatConfigMutation) ClearField(name string) error {
	switch name {
	case chatconfig.FieldDiscordUserID:
		m.ClearDiscordUserID()
		return nil
	case chatconfig.FieldForwardMode:
		m.ClearForwardMode()
		return nil
	}
	return fmt.Errorf("unknown ChatConfig nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChatConfigMutation) ResetField(name string) error {
	switch name {
	case chatconfig.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case chatconfig.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case chatconfig.FieldDeviceCode:
		m.ResetDeviceCode()
		return nil
	case chatconfig.FieldDiscordUserID:
		m.ResetDiscordUserID()
		return nil
	case chatconfig.FieldForwardMode:
		m.ResetForwardMode()
		return nil
	}
	return fmt.Errorf("unknown ChatConfig field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChatConfigMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChatConfigMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChatConfigMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChatConfigMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChatConfigMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChatConfigMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChatConfigMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ChatConfig unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChatConfigMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ChatConfig edge %s", name)
}
