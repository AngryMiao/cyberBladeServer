// Code generated by ent, DO NOT EDIT.

package chatconfig

import (
	"angrymiao-ai/app/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// DeviceCode applies equality check predicate on the "device_code" field. It's identical to DeviceCodeEQ.
func DeviceCode(v string) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeviceCode), v))
	})
}

// DiscordUserID applies equality check predicate on the "discord_user_id" field. It's identical to DiscordUserIDEQ.
func DiscordUserID(v string) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscordUserID), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.ChatConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.ChatConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.ChatConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.ChatConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// DeviceCodeEQ applies the EQ predicate on the "device_code" field.
func DeviceCodeEQ(v string) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeviceCode), v))
	})
}

// DeviceCodeNEQ applies the NEQ predicate on the "device_code" field.
func DeviceCodeNEQ(v string) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeviceCode), v))
	})
}

// DeviceCodeIn applies the In predicate on the "device_code" field.
func DeviceCodeIn(vs ...string) predicate.ChatConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeviceCode), v...))
	})
}

// DeviceCodeNotIn applies the NotIn predicate on the "device_code" field.
func DeviceCodeNotIn(vs ...string) predicate.ChatConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeviceCode), v...))
	})
}

// DeviceCodeGT applies the GT predicate on the "device_code" field.
func DeviceCodeGT(v string) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeviceCode), v))
	})
}

// DeviceCodeGTE applies the GTE predicate on the "device_code" field.
func DeviceCodeGTE(v string) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeviceCode), v))
	})
}

// DeviceCodeLT applies the LT predicate on the "device_code" field.
func DeviceCodeLT(v string) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeviceCode), v))
	})
}

// DeviceCodeLTE applies the LTE predicate on the "device_code" field.
func DeviceCodeLTE(v string) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeviceCode), v))
	})
}

// DeviceCodeContains applies the Contains predicate on the "device_code" field.
func DeviceCodeContains(v string) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDeviceCode), v))
	})
}

// DeviceCodeHasPrefix applies the HasPrefix predicate on the "device_code" field.
func DeviceCodeHasPrefix(v string) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDeviceCode), v))
	})
}

// DeviceCodeHasSuffix applies the HasSuffix predicate on the "device_code" field.
func DeviceCodeHasSuffix(v string) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDeviceCode), v))
	})
}

// DeviceCodeEqualFold applies the EqualFold predicate on the "device_code" field.
func DeviceCodeEqualFold(v string) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDeviceCode), v))
	})
}

// DeviceCodeContainsFold applies the ContainsFold predicate on the "device_code" field.
func DeviceCodeContainsFold(v string) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDeviceCode), v))
	})
}

// DiscordUserIDEQ applies the EQ predicate on the "discord_user_id" field.
func DiscordUserIDEQ(v string) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscordUserID), v))
	})
}

// DiscordUserIDNEQ applies the NEQ predicate on the "discord_user_id" field.
func DiscordUserIDNEQ(v string) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDiscordUserID), v))
	})
}

// DiscordUserIDIn applies the In predicate on the "discord_user_id" field.
func DiscordUserIDIn(vs ...string) predicate.ChatConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDiscordUserID), v...))
	})
}

// DiscordUserIDNotIn applies the NotIn predicate on the "discord_user_id" field.
func DiscordUserIDNotIn(vs ...string) predicate.ChatConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDiscordUserID), v...))
	})
}

// DiscordUserIDGT applies the GT predicate on the "discord_user_id" field.
func DiscordUserIDGT(v string) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDiscordUserID), v))
	})
}

// DiscordUserIDGTE applies the GTE predicate on the "discord_user_id" field.
func DiscordUserIDGTE(v string) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDiscordUserID), v))
	})
}

// DiscordUserIDLT applies the LT predicate on the "discord_user_id" field.
func DiscordUserIDLT(v string) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDiscordUserID), v))
	})
}

// DiscordUserIDLTE applies the LTE predicate on the "discord_user_id" field.
func DiscordUserIDLTE(v string) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDiscordUserID), v))
	})
}

// DiscordUserIDContains applies the Contains predicate on the "discord_user_id" field.
func DiscordUserIDContains(v string) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDiscordUserID), v))
	})
}

// DiscordUserIDHasPrefix applies the HasPrefix predicate on the "discord_user_id" field.
func DiscordUserIDHasPrefix(v string) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDiscordUserID), v))
	})
}

// DiscordUserIDHasSuffix applies the HasSuffix predicate on the "discord_user_id" field.
func DiscordUserIDHasSuffix(v string) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDiscordUserID), v))
	})
}

// DiscordUserIDIsNil applies the IsNil predicate on the "discord_user_id" field.
func DiscordUserIDIsNil() predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDiscordUserID)))
	})
}

// DiscordUserIDNotNil applies the NotNil predicate on the "discord_user_id" field.
func DiscordUserIDNotNil() predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDiscordUserID)))
	})
}

// DiscordUserIDEqualFold applies the EqualFold predicate on the "discord_user_id" field.
func DiscordUserIDEqualFold(v string) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDiscordUserID), v))
	})
}

// DiscordUserIDContainsFold applies the ContainsFold predicate on the "discord_user_id" field.
func DiscordUserIDContainsFold(v string) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDiscordUserID), v))
	})
}

// ForwardModeEQ applies the EQ predicate on the "forward_mode" field.
func ForwardModeEQ(v ForwardMode) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldForwardMode), v))
	})
}

// ForwardModeNEQ applies the NEQ predicate on the "forward_mode" field.
func ForwardModeNEQ(v ForwardMode) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldForwardMode), v))
	})
}

// ForwardModeIn applies the In predicate on the "forward_mode" field.
func ForwardModeIn(vs ...ForwardMode) predicate.ChatConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldForwardMode), v...))
	})
}

// ForwardModeNotIn applies the NotIn predicate on the "forward_mode" field.
func ForwardModeNotIn(vs ...ForwardMode) predicate.ChatConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldForwardMode), v...))
	})
}

// ForwardModeIsNil applies the IsNil predicate on the "forward_mode" field.
func ForwardModeIsNil() predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldForwardMode)))
	})
}

// ForwardModeNotNil applies the NotNil predicate on the "forward_mode" field.
func ForwardModeNotNil() predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldForwardMode)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ChatConfig) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ChatConfig) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ChatConfig) predicate.ChatConfig {
	return predicate.ChatConfig(func(s *sql.Selector) {
		p(s.Not())
	})
}
