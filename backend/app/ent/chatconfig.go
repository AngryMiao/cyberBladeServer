// Code generated by ent, DO NOT EDIT.

package ent

import (
	"angrymiao-ai/app/ent/chatconfig"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ChatConfig is the model entity for the ChatConfig schema.
type ChatConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// DeviceCode holds the value of the "device_code" field.
	DeviceCode string `json:"device_code,omitempty"`
	// DiscordUserID holds the value of the "discord_user_id" field.
	DiscordUserID *string `json:"discord_user_id,omitempty"`
	// ForwardMode holds the value of the "forward_mode" field.
	ForwardMode chatconfig.ForwardMode `json:"forward_mode,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChatConfig) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case chatconfig.FieldID:
			values[i] = new(sql.NullInt64)
		case chatconfig.FieldDeviceCode, chatconfig.FieldDiscordUserID, chatconfig.FieldForwardMode:
			values[i] = new(sql.NullString)
		case chatconfig.FieldCreateTime, chatconfig.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ChatConfig", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChatConfig fields.
func (cc *ChatConfig) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chatconfig.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cc.ID = int(value.Int64)
		case chatconfig.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				cc.CreateTime = value.Time
			}
		case chatconfig.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				cc.UpdateTime = value.Time
			}
		case chatconfig.FieldDeviceCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_code", values[i])
			} else if value.Valid {
				cc.DeviceCode = value.String
			}
		case chatconfig.FieldDiscordUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field discord_user_id", values[i])
			} else if value.Valid {
				cc.DiscordUserID = new(string)
				*cc.DiscordUserID = value.String
			}
		case chatconfig.FieldForwardMode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field forward_mode", values[i])
			} else if value.Valid {
				cc.ForwardMode = chatconfig.ForwardMode(value.String)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ChatConfig.
// Note that you need to call ChatConfig.Unwrap() before calling this method if this ChatConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (cc *ChatConfig) Update() *ChatConfigUpdateOne {
	return (&ChatConfigClient{config: cc.config}).UpdateOne(cc)
}

// Unwrap unwraps the ChatConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cc *ChatConfig) Unwrap() *ChatConfig {
	_tx, ok := cc.config.driver.(*txDriver)
	if !ok {
		panic("ent: ChatConfig is not a transactional entity")
	}
	cc.config.driver = _tx.drv
	return cc
}

// String implements the fmt.Stringer.
func (cc *ChatConfig) String() string {
	var builder strings.Builder
	builder.WriteString("ChatConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cc.ID))
	builder.WriteString("create_time=")
	builder.WriteString(cc.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(cc.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("device_code=")
	builder.WriteString(cc.DeviceCode)
	builder.WriteString(", ")
	if v := cc.DiscordUserID; v != nil {
		builder.WriteString("discord_user_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("forward_mode=")
	builder.WriteString(fmt.Sprintf("%v", cc.ForwardMode))
	builder.WriteByte(')')
	return builder.String()
}

// ChatConfigs is a parsable slice of ChatConfig.
type ChatConfigs []*ChatConfig

func (cc ChatConfigs) config(cfg config) {
	for _i := range cc {
		cc[_i].config = cfg
	}
}
