// Code generated by ent, DO NOT EDIT.

package ent

import (
	"angrymiao-ai/app/ent/chatconfig"
	"angrymiao-ai/app/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChatConfigUpdate is the builder for updating ChatConfig entities.
type ChatConfigUpdate struct {
	config
	hooks     []Hook
	mutation  *ChatConfigMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ChatConfigUpdate builder.
func (ccu *ChatConfigUpdate) Where(ps ...predicate.ChatConfig) *ChatConfigUpdate {
	ccu.mutation.Where(ps...)
	return ccu
}

// SetUpdateTime sets the "update_time" field.
func (ccu *ChatConfigUpdate) SetUpdateTime(t time.Time) *ChatConfigUpdate {
	ccu.mutation.SetUpdateTime(t)
	return ccu
}

// SetDeviceCode sets the "device_code" field.
func (ccu *ChatConfigUpdate) SetDeviceCode(s string) *ChatConfigUpdate {
	ccu.mutation.SetDeviceCode(s)
	return ccu
}

// SetDiscordUserID sets the "discord_user_id" field.
func (ccu *ChatConfigUpdate) SetDiscordUserID(s string) *ChatConfigUpdate {
	ccu.mutation.SetDiscordUserID(s)
	return ccu
}

// SetNillableDiscordUserID sets the "discord_user_id" field if the given value is not nil.
func (ccu *ChatConfigUpdate) SetNillableDiscordUserID(s *string) *ChatConfigUpdate {
	if s != nil {
		ccu.SetDiscordUserID(*s)
	}
	return ccu
}

// ClearDiscordUserID clears the value of the "discord_user_id" field.
func (ccu *ChatConfigUpdate) ClearDiscordUserID() *ChatConfigUpdate {
	ccu.mutation.ClearDiscordUserID()
	return ccu
}

// SetForwardMode sets the "forward_mode" field.
func (ccu *ChatConfigUpdate) SetForwardMode(cm chatconfig.ForwardMode) *ChatConfigUpdate {
	ccu.mutation.SetForwardMode(cm)
	return ccu
}

// SetNillableForwardMode sets the "forward_mode" field if the given value is not nil.
func (ccu *ChatConfigUpdate) SetNillableForwardMode(cm *chatconfig.ForwardMode) *ChatConfigUpdate {
	if cm != nil {
		ccu.SetForwardMode(*cm)
	}
	return ccu
}

// ClearForwardMode clears the value of the "forward_mode" field.
func (ccu *ChatConfigUpdate) ClearForwardMode() *ChatConfigUpdate {
	ccu.mutation.ClearForwardMode()
	return ccu
}

// Mutation returns the ChatConfigMutation object of the builder.
func (ccu *ChatConfigUpdate) Mutation() *ChatConfigMutation {
	return ccu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ccu *ChatConfigUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ccu.defaults()
	if len(ccu.hooks) == 0 {
		if err = ccu.check(); err != nil {
			return 0, err
		}
		affected, err = ccu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChatConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ccu.check(); err != nil {
				return 0, err
			}
			ccu.mutation = mutation
			affected, err = ccu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ccu.hooks) - 1; i >= 0; i-- {
			if ccu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ccu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ccu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ccu *ChatConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := ccu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ccu *ChatConfigUpdate) Exec(ctx context.Context) error {
	_, err := ccu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccu *ChatConfigUpdate) ExecX(ctx context.Context) {
	if err := ccu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccu *ChatConfigUpdate) defaults() {
	if _, ok := ccu.mutation.UpdateTime(); !ok {
		v := chatconfig.UpdateDefaultUpdateTime()
		ccu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccu *ChatConfigUpdate) check() error {
	if v, ok := ccu.mutation.DeviceCode(); ok {
		if err := chatconfig.DeviceCodeValidator(v); err != nil {
			return &ValidationError{Name: "device_code", err: fmt.Errorf(`ent: validator failed for field "ChatConfig.device_code": %w`, err)}
		}
	}
	if v, ok := ccu.mutation.ForwardMode(); ok {
		if err := chatconfig.ForwardModeValidator(v); err != nil {
			return &ValidationError{Name: "forward_mode", err: fmt.Errorf(`ent: validator failed for field "ChatConfig.forward_mode": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ccu *ChatConfigUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ChatConfigUpdate {
	ccu.modifiers = append(ccu.modifiers, modifiers...)
	return ccu
}

func (ccu *ChatConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   chatconfig.Table,
			Columns: chatconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: chatconfig.FieldID,
			},
		},
	}
	if ps := ccu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: chatconfig.FieldUpdateTime,
		})
	}
	if value, ok := ccu.mutation.DeviceCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chatconfig.FieldDeviceCode,
		})
	}
	if value, ok := ccu.mutation.DiscordUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chatconfig.FieldDiscordUserID,
		})
	}
	if ccu.mutation.DiscordUserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: chatconfig.FieldDiscordUserID,
		})
	}
	if value, ok := ccu.mutation.ForwardMode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: chatconfig.FieldForwardMode,
		})
	}
	if ccu.mutation.ForwardModeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: chatconfig.FieldForwardMode,
		})
	}
	_spec.Modifiers = ccu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, ccu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chatconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ChatConfigUpdateOne is the builder for updating a single ChatConfig entity.
type ChatConfigUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ChatConfigMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdateTime sets the "update_time" field.
func (ccuo *ChatConfigUpdateOne) SetUpdateTime(t time.Time) *ChatConfigUpdateOne {
	ccuo.mutation.SetUpdateTime(t)
	return ccuo
}

// SetDeviceCode sets the "device_code" field.
func (ccuo *ChatConfigUpdateOne) SetDeviceCode(s string) *ChatConfigUpdateOne {
	ccuo.mutation.SetDeviceCode(s)
	return ccuo
}

// SetDiscordUserID sets the "discord_user_id" field.
func (ccuo *ChatConfigUpdateOne) SetDiscordUserID(s string) *ChatConfigUpdateOne {
	ccuo.mutation.SetDiscordUserID(s)
	return ccuo
}

// SetNillableDiscordUserID sets the "discord_user_id" field if the given value is not nil.
func (ccuo *ChatConfigUpdateOne) SetNillableDiscordUserID(s *string) *ChatConfigUpdateOne {
	if s != nil {
		ccuo.SetDiscordUserID(*s)
	}
	return ccuo
}

// ClearDiscordUserID clears the value of the "discord_user_id" field.
func (ccuo *ChatConfigUpdateOne) ClearDiscordUserID() *ChatConfigUpdateOne {
	ccuo.mutation.ClearDiscordUserID()
	return ccuo
}

// SetForwardMode sets the "forward_mode" field.
func (ccuo *ChatConfigUpdateOne) SetForwardMode(cm chatconfig.ForwardMode) *ChatConfigUpdateOne {
	ccuo.mutation.SetForwardMode(cm)
	return ccuo
}

// SetNillableForwardMode sets the "forward_mode" field if the given value is not nil.
func (ccuo *ChatConfigUpdateOne) SetNillableForwardMode(cm *chatconfig.ForwardMode) *ChatConfigUpdateOne {
	if cm != nil {
		ccuo.SetForwardMode(*cm)
	}
	return ccuo
}

// ClearForwardMode clears the value of the "forward_mode" field.
func (ccuo *ChatConfigUpdateOne) ClearForwardMode() *ChatConfigUpdateOne {
	ccuo.mutation.ClearForwardMode()
	return ccuo
}

// Mutation returns the ChatConfigMutation object of the builder.
func (ccuo *ChatConfigUpdateOne) Mutation() *ChatConfigMutation {
	return ccuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ccuo *ChatConfigUpdateOne) Select(field string, fields ...string) *ChatConfigUpdateOne {
	ccuo.fields = append([]string{field}, fields...)
	return ccuo
}

// Save executes the query and returns the updated ChatConfig entity.
func (ccuo *ChatConfigUpdateOne) Save(ctx context.Context) (*ChatConfig, error) {
	var (
		err  error
		node *ChatConfig
	)
	ccuo.defaults()
	if len(ccuo.hooks) == 0 {
		if err = ccuo.check(); err != nil {
			return nil, err
		}
		node, err = ccuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChatConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ccuo.check(); err != nil {
				return nil, err
			}
			ccuo.mutation = mutation
			node, err = ccuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ccuo.hooks) - 1; i >= 0; i-- {
			if ccuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ccuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ccuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ChatConfig)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ChatConfigMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ccuo *ChatConfigUpdateOne) SaveX(ctx context.Context) *ChatConfig {
	node, err := ccuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ccuo *ChatConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := ccuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccuo *ChatConfigUpdateOne) ExecX(ctx context.Context) {
	if err := ccuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccuo *ChatConfigUpdateOne) defaults() {
	if _, ok := ccuo.mutation.UpdateTime(); !ok {
		v := chatconfig.UpdateDefaultUpdateTime()
		ccuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccuo *ChatConfigUpdateOne) check() error {
	if v, ok := ccuo.mutation.DeviceCode(); ok {
		if err := chatconfig.DeviceCodeValidator(v); err != nil {
			return &ValidationError{Name: "device_code", err: fmt.Errorf(`ent: validator failed for field "ChatConfig.device_code": %w`, err)}
		}
	}
	if v, ok := ccuo.mutation.ForwardMode(); ok {
		if err := chatconfig.ForwardModeValidator(v); err != nil {
			return &ValidationError{Name: "forward_mode", err: fmt.Errorf(`ent: validator failed for field "ChatConfig.forward_mode": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ccuo *ChatConfigUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ChatConfigUpdateOne {
	ccuo.modifiers = append(ccuo.modifiers, modifiers...)
	return ccuo
}

func (ccuo *ChatConfigUpdateOne) sqlSave(ctx context.Context) (_node *ChatConfig, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   chatconfig.Table,
			Columns: chatconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: chatconfig.FieldID,
			},
		},
	}
	id, ok := ccuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ChatConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ccuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chatconfig.FieldID)
		for _, f := range fields {
			if !chatconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != chatconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ccuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: chatconfig.FieldUpdateTime,
		})
	}
	if value, ok := ccuo.mutation.DeviceCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chatconfig.FieldDeviceCode,
		})
	}
	if value, ok := ccuo.mutation.DiscordUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chatconfig.FieldDiscordUserID,
		})
	}
	if ccuo.mutation.DiscordUserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: chatconfig.FieldDiscordUserID,
		})
	}
	if value, ok := ccuo.mutation.ForwardMode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: chatconfig.FieldForwardMode,
		})
	}
	if ccuo.mutation.ForwardModeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: chatconfig.FieldForwardMode,
		})
	}
	_spec.Modifiers = ccuo.modifiers
	_node = &ChatConfig{config: ccuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ccuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chatconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
